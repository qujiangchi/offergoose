"""
智能题库生成系统

根据技术栈和难度生成面试题
"""

def generate_question(tech_stack: str, category: str, difficulty: str) -> str:
    """
    生成面试题目
    
    :param tech_stack: 技术栈(如Python/Java等)
    :param category: 考察方向(算法/系统设计/语言特性)
    :param difficulty: 难度等级(L1-L5)
    :return: 格式化的问题字符串
    """
    prompt = f"""
作为资深{tech_stack}面试官，生成一道符合以下要求的题目：
1. 考察方向：{category} 
2. 难度等级：{difficulty}（L3对应大厂中级岗位）
3. 题型结构：
   - 问题描述（200字内）
   - 示例输入输出
   - 隐藏的常见坑点（至少2个）
4. 输出格式：
   [题目编号] [考察知识点]
   ## 题目描述
   ...
   [约束条件]
   [示例]
   [期望解法]（仅记录不显示）
"""
    # 题目库示例
    questions = {
        "Python": {
            "算法": {
                "L1": "[P001] 两数之和\n## 题目描述\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数。\n[约束条件]\n- 假设每种输入只会对应一个答案\n[示例]\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n[期望解法] 哈希表解法时间复杂度O(n)",
                "L3": "[P003] 无重复字符的最长子串\n## 题目描述\n给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。\n[约束条件]\n- 字符串长度不超过50000\n[示例]\n输入：\"abcabcbb\"\n输出：3\n[期望解法] 滑动窗口时间复杂度O(n)"
            },
            "系统设计": {
                "L2": "[S002] 设计一个简单的缓存系统\n## 题目描述\n设计一个基于内存的键值缓存系统，支持设置过期时间。\n[约束条件]\n- 支持并发访问\n- 内存使用不超过1GB\n[期望解法] 使用字典和过期队列实现"
            }
        },
        "Java": {
            "算法": {
                "L2": "[J002] 反转链表\n## 题目描述\n反转一个单链表。\n[约束条件]\n- 使用迭代或递归实现\n[示例]\n输入：1->2->3->4->5\n输出：5->4->3->2->1\n[期望解法] 迭代解法空间复杂度O(1)"
            }
        }
    }
    
    # 根据参数选择题目
    try:
        return questions[tech_stack][category][difficulty]
    except KeyError:
        return "暂未找到匹配的题目，请调整参数。"